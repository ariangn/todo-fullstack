// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/ariangn/todo-go/application/category"
	"github.com/ariangn/todo-go/application/tag"
	"github.com/ariangn/todo-go/application/todo"
	"github.com/ariangn/todo-go/application/user"
	"github.com/ariangn/todo-go/infrastructure/auth"
	"github.com/ariangn/todo-go/infrastructure/database"
	"github.com/ariangn/todo-go/interface-adapter/handler"
	"github.com/google/wire"
)

// Injectors from container.go:

// InitializeContainer is the Wire‚Äêgenerated entry point (see wire_gen.go)
func InitializeContainer() (*Container, error) {
	authClientInterface := auth.NewAuthClient()
	supabaseClient, err := ProvideSupabaseClient()
	if err != nil {
		return nil, err
	}
	userRepository := database.NewUserRepository(supabaseClient)
	registerUseCase := user.NewRegisterUseCase(userRepository)
	loginUseCase := user.NewLoginUseCase(userRepository, authClientInterface)
	userController := handler.NewUserController(registerUseCase, loginUseCase)
	todoRepository := database.NewTodoRepository(supabaseClient)
	categoryRepository := database.NewCategoryRepository(supabaseClient)
	tagRepository := database.NewTagRepository(supabaseClient)
	createUseCase := todo.NewCreateUseCase(todoRepository, categoryRepository, tagRepository)
	listUseCase := todo.NewListUseCase(todoRepository)
	findByIDUseCase := todo.NewFindByIDUseCase(todoRepository)
	updateUseCase := todo.NewUpdateUseCase(todoRepository)
	toggleStatusUseCase := todo.NewToggleStatusUseCase(todoRepository)
	deleteUseCase := todo.NewDeleteUseCase(todoRepository)
	duplicateUseCase := todo.NewDuplicateUseCase(todoRepository)
	todoController := handler.NewTodoController(createUseCase, listUseCase, findByIDUseCase, updateUseCase, toggleStatusUseCase, deleteUseCase, duplicateUseCase)
	categoryCreateUseCase := category.NewCreateUseCase(categoryRepository)
	categoryListUseCase := category.NewListUseCase(categoryRepository)
	categoryUpdateUseCase := category.NewUpdateUseCase(categoryRepository)
	categoryDeleteUseCase := category.NewDeleteUseCase(categoryRepository)
	categoryController := handler.NewCategoryController(categoryCreateUseCase, categoryListUseCase, categoryUpdateUseCase, categoryDeleteUseCase)
	tagCreateUseCase := tag.NewCreateUseCase(tagRepository)
	tagListUseCase := tag.NewListUseCase(tagRepository)
	tagUpdateUseCase := tag.NewUpdateUseCase(tagRepository)
	tagDeleteUseCase := tag.NewDeleteUseCase(tagRepository)
	tagController := handler.NewTagController(tagCreateUseCase, tagListUseCase, tagUpdateUseCase, tagDeleteUseCase)
	container := &Container{
		AuthClient:         authClientInterface,
		SupabaseClient:     supabaseClient,
		UserController:     userController,
		TodoController:     todoController,
		CategoryController: categoryController,
		TagController:      tagController,
	}
	return container, nil
}

// container.go:

// Container holds all the components
type Container struct {
	// AuthClient allows ValidateToken / GenerateToken
	AuthClient auth.AuthClientInterface

	// Supabase client used by all repositories
	SupabaseClient *database.SupabaseClient

	// HTTP controllers (handlers)
	UserController     *handler.UserController
	TodoController     *handler.TodoController
	CategoryController *handler.CategoryController
	TagController      *handler.TagController
}

// ProvideSupabaseClient constructs a SupabaseClient
func ProvideSupabaseClient() (*database.SupabaseClient, error) {
	return database.NewSupabaseClient()
}

var RepositorySet = wire.NewSet(database.NewUserRepository, database.NewTodoRepository, database.NewCategoryRepository, database.NewTagRepository)

var AuthSet = wire.NewSet(auth.NewAuthClient)

var UserUseCaseSet = wire.NewSet(user.NewRegisterUseCase, user.NewLoginUseCase)

var TodoUseCaseSet = wire.NewSet(todo.NewCreateUseCase, todo.NewListUseCase, todo.NewFindByIDUseCase, todo.NewUpdateUseCase, todo.NewToggleStatusUseCase, todo.NewDeleteUseCase, todo.NewDuplicateUseCase)

var CategoryUseCaseSet = wire.NewSet(category.NewCreateUseCase, category.NewListUseCase, category.NewUpdateUseCase, category.NewDeleteUseCase)

var TagUseCaseSet = wire.NewSet(tag.NewCreateUseCase, tag.NewListUseCase, tag.NewUpdateUseCase, tag.NewDeleteUseCase)

var HandlerSet = wire.NewSet(handler.NewUserController, handler.NewTodoController, handler.NewCategoryController, handler.NewTagController)

var ProviderSet = wire.NewSet(
	ProvideSupabaseClient,
	RepositorySet,
	AuthSet,
	UserUseCaseSet,
	TodoUseCaseSet,
	CategoryUseCaseSet,
	TagUseCaseSet,
	HandlerSet, wire.Struct(
		new(Container),
		"AuthClient",
		"SupabaseClient",
		"UserController",
		"TodoController",
		"CategoryController",
		"TagController",
	),
)
